exit
job.errors.full_messages
job.errors.full_messages <<  {address: ["Address is invalid!"]}
lookup[0]
job.errors.full_messages
job
exit
job.errors.full_messages
jobs.errors.full_messages
lookup[0]
job.errors.messages
job.errors
job.errors.full_messages
job.errors.add(:address, :blank, message: "Address is invalid!") if lookup[0] == nil?
job.valid?
job.errors
job
exit
params["job"]["address"]
params
lookup = Geocoder.search(params["job"]["address"])
exit
user.errors.full_messages
user.valid?
user.valid
exit
user.avatar.url(:marker)
user.id
exit
Contract.where(job:job, employee: user)
current_user
Job.find(params["jobId"])
exit
render json: {errors: job.errors.full_messages}
job.errors.full_messages}.to_json
job.errors.full_messages
        endjob.errors.full_messages
job.errors.full_messages}
exit
job_params
exit
res_json
exit
JSON.parse(response)["results"][0]["geometry"]["location"]["lat"]
JSON.parse(response)["results"][0]["geometry"]["location"]
JSON.parse(response)["results"][0]["geometry"]["lat"]
JSON.parse(response)["results"][0]["geometry"]
JSON.parse(response)["results"][0]
JSON.parse(response)["results"]["geometry"]
JSON.parse(response)["results"]
JSON.parse(response)["results"]["location"]
JSON.parse(response)["location"]
JSON.parse(response).location
JSON.parse(response)
JSON.parse
response
exit
Geokit::Geocoders::GoogleGeocoder.config
Geokit::Geocoders::GoogleGeocoder.methods
Geokit::Geocoders::GoogleGeocoder.geocode.methods
Geokit::Geocoders::GoogleGeocoder.geocode
Geokit::Geocoders::GoogleGeocoder.geocode{ |address| adsfarsdfafsdgf }
Geokit::Geocoders::GoogleGeocoder.geocode('Waltham')
Geokit::Geocoders::GoogleGeocoder.geocode
exit
MultiGeocoder.geocode('100 Spear st, San Francisco, CA')
exit
Geokit::Location
Geokit::Address
Geokit.methods
Geokit
Geokit.children
Geokit::Geocoders::GoogleGeocoder.error
Geokit::Geocoders::GoogleGeocoder.methods
Geokit::Geocoders::GoogleGeocoder
Geokit::Geocoders::GoogleGeocoder.geocode('Toledo')
exit
a.geocode('15 gordon st, waltham').errors.add(:address, "Could not Geocode address")
a.geocode('15 gordon st, waltham')errors.add(:address, "Could not Geocode address")
a.geocode('15 gordon st, waltham')
a.geocode
a.api_key
a.epi_key
a.methods
a
a = Geokit::Geocoders::GoogleGeocoder
Geokit::Geocoders::GoogleGeocoder.geocode("15 Gordon waltham")
exit
Geokit::Geocoders::GoogleGeocoder.geocode("15 Gordon waltham")
Geokit::Geocoders::GoogleGeocoder.geocode('15 Gordon waltham')
Geokit::Geocoders::provider_order = [:google]
Geokit::Geocoders::provider_order = [:google,:us]
exit
Geokit::Geocoders::GoogleGeocoder.geocode('15 Gordon waltham')
Geokit::Geocoders::GoogleGeocoder.geocode
Geokit::Geocoders
Geokit::Geocoders::GoogleGeocoder.geocode '789 Geary St, San Francisco, CA'
exit
params
exit
params
exit
params
exit
params
exit
params
user
exit
ActionController::Base.helpers.sanitize('string')
sanitize()
sanitize
exit
params
exit
ActionController::Parameters.permit_all_parameters = true
params
exit
params.require(:stuff)
params.require(:data)
params
current_user
exit
params
exit
current_user
exit
params
exit
params["stuff"]
params
stuff
exit
request
params
exit
params
data
exit
params
exit
params
exit
params
exit
file.original_filename = test.png
file.methods
file
